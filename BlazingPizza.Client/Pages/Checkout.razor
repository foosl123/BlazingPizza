@page "/checkout"
@inject OrdersClient OrdersClient
@inject OrderState orderState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="main">
    <EditForm Model="orderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            <OrderReview Order="orderState.Order" />
        </div>
        <div class="checkout-delivery-address">
            <h4>Deliver to...</h4>
            <AddressEditor Address="orderState.Order.DeliveryAddress" />
        </div>
    </div>
    
    <button type="submit" class="checkout-button btn btn-warning">
        Place order
    </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>





@code {
    async Task PlaceOrder()
    {

        try
        {
            var newOrderId = await OrdersClient.PlaceOrder(orderState.Order);
            orderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    protected override void OnInitialized()
{
    // In the background, ask if they want to be notified about order updates
    _ = RequestNotificationSubscriptionAsync();
}

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription is not null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }
}
